Overview
========

The Cepton SDK provides the following features

- **Parsing**: parse sensor packets
- **Calibration**: apply sensor calibration
- **Networking**: listen for sensor packets
- **Capture Replay**: read sensor packets from a PCAP file
- **Frame Accumulation**: accumulate and output sensor points by frame

Currently, the Cepton LiDAR packet formats are under active development, and are not publicly available. The SDK is required for **Parsing** and **Calibration**. All other SDK features are optional, and can be done manually by the user.

For prototyping, it is recommended to start with the high level methods in :doc:`api` and :doc:`utilities`.

Timestamps
----------

All :code:`int64` timestamps are microseconds since the Unix epoch (UTC). Point timestamps are based on one of the following sources (the first valid source is used):

1. GPS (NMEA + PPS)
2. PTP
3. Host PC

All :code:`float` and :code:`int64` time differences are seconds (measurement period, replay time, frame length, etc.).

Multiple Returns
----------------

To enable multiple returns, pass the :any:`CEPTON_SDK_CONTROL_ENABLE_MULTIPLE_RETURNS` flag during initialization.

The returns are as follows:

  1. Strongest signal.
  2. Furthest signal, if it is not the strongest. Otherwise, the second strongest signal.

Concurrency
-----------

- If networking is enabled, the sdk creates 2 threads for networking. All callbacks occur in these networking threads.
- If networking is disabled, the sdk does not create any threads. All callbacks occur in the main thread.
- All sdk getter functions are thread safe, and can be called from callbacks. Other sdk functions are not guarunteed to be thread safe, and can cause deadlock if called from callbacks.

Minimal SDK
-----------

If desired, the following SDK features can be disabled in the SDK and performed manually by the user:

- Networking: :doc:`samples/network`.
- Capture Replay: :doc:`samples/replay`.
- Frame Accumulation: :doc:`samples/frame`.
