Points
======

Types
-----

.. autoclass:: cepton_sdk.ImagePoints
  :members:

.. autoclass:: cepton_sdk.Points
  :members:

.. autofunction:: cepton_sdk.combine_points

All sdk methods return image points, but they can easily be converted to 3d points:

.. code-block:: python
  :linenos:

  points = image_points.to_points()

All point array classes support numpy indexing and assignment as if they were 1-d arrays:

.. code-block:: python
  :linenos:

  n_points = len(image_points_1)
  image_points_2[10:20] = image_points_1[:10]

Multiple point arrays can also be combined:

.. code-block:: python
  :linenos:

  image_points = cepton_sdk.combine_points([image_points_1, image_points_2])

Methods
-------

See :doc:`samples/listen`.

The following methods return points directly from the C SDK callback.

.. autofunction:: cepton_sdk.listen_image_frames
.. autofunction:: cepton_sdk.unlisten_image_frames

There are also listener classes that seamlessly handle accumulation and waiting.

.. autoclass:: cepton_sdk.ImageFramesListener
.. autoclass:: cepton_sdk.SensorImageFramesListener

Export
------

.. autofunction:: cepton_sdk.export.save_points_las
.. autofunction:: cepton_sdk.export.load_points_las
.. autofunction:: cepton_sdk.export.save_points_ply
.. autofunction:: cepton_sdk.export.save_points_pcd
